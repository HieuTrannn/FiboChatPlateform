// <auto-generated />
using System;
using Course.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Course.Infrastructure.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20251024073315_AddTopicMasterTopicForeignKey")]
    partial class AddTopicMasterTopicForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Course.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VerifiedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FileId");

                    b.HasIndex("TopicId");

                    b.ToTable("Documents", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Domains", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.Embedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ChunkText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QApairId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<float[]>("Vector")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Embeddings", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileAcl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileBucket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Files", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Keywords", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.LecturerMasterTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterTopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterTopicId");

                    b.ToTable("LecturerMasterTopics", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.MasterTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("MasterTopics", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.MasterTopicKeyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterTopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("MasterTopicId", "KeywordId")
                        .IsUnique();

                    b.ToTable("MasterTopicKeywords", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MasterTopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterTopicId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MasterTopicId");

                    b.HasIndex("MasterTopicId1");

                    b.ToTable("Topics", "public");
                });

            modelBuilder.Entity("Course.Domain.Entities.Document", b =>
                {
                    b.HasOne("Course.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Course.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Course.Domain.Entities.Topic", "Topic")
                        .WithMany("Documents")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("File");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Course.Domain.Entities.Embedding", b =>
                {
                    b.HasOne("Course.Domain.Entities.Document", "Document")
                        .WithMany("Embeddings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Course.Domain.Entities.LecturerMasterTopic", b =>
                {
                    b.HasOne("Course.Domain.Entities.MasterTopic", "MasterTopic")
                        .WithMany("LecturerMasterTopics")
                        .HasForeignKey("MasterTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTopic");
                });

            modelBuilder.Entity("Course.Domain.Entities.MasterTopic", b =>
                {
                    b.HasOne("Course.Domain.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Course.Domain.Entities.MasterTopicKeyword", b =>
                {
                    b.HasOne("Course.Domain.Entities.Keyword", "Keyword")
                        .WithMany("MasterTopicKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Course.Domain.Entities.MasterTopic", "MasterTopic")
                        .WithMany("MasterTopicKeywords")
                        .HasForeignKey("MasterTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("MasterTopic");
                });

            modelBuilder.Entity("Course.Domain.Entities.Topic", b =>
                {
                    b.HasOne("Course.Domain.Entities.MasterTopic", null)
                        .WithMany("Topics")
                        .HasForeignKey("MasterTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Course.Domain.Entities.MasterTopic", "MasterTopic")
                        .WithMany()
                        .HasForeignKey("MasterTopicId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTopic");
                });

            modelBuilder.Entity("Course.Domain.Entities.Document", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("Course.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Course.Domain.Entities.Keyword", b =>
                {
                    b.Navigation("MasterTopicKeywords");
                });

            modelBuilder.Entity("Course.Domain.Entities.MasterTopic", b =>
                {
                    b.Navigation("LecturerMasterTopics");

                    b.Navigation("MasterTopicKeywords");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Course.Domain.Entities.Topic", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
